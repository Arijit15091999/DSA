//link:- https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/submissions/

iterative aproach

/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;
};
*/

//Time Complexity O(n)
//const space;

class Solution {
    public Node flatten(Node head) {
        Node node = head;
        
        while(node != null){
            if(node.child != null){
                flatChild(node);
            }
            node = node.next;
        }
        
        return head;
    }
    
    public void flatChild(Node node){
        Node next = node.next;
        node.next = node.child;
        node.child.prev = node;
        
        Node temp = node.next;
        while(temp.next != null){
            temp = temp.next;
        }
        temp.next = next;
        if(next != null){
            next.prev = temp;
        }
        
        node.child = null;
    }
}

recursive approach
//Time Complexity O(n)
// spaceComplexity O(n);


public Node flatten(Node head) {
        if(head == null) return head;
        
        Node node = head;
        helper(node);
        return head;
    }
    
    public Node helper(Node node){
        if(node.next  == null && node.child == null){
            return node;
        }
        
        if(node != null && node.child != null){
            Node temp = node.next;
            node.next = node.child;
            node.child.prev = node;
            node.child = null;
            
            Node tail = helper(node.next);
            tail.next = temp;
            if(temp != null){
                temp.prev = tail;
                return helper(temp);
            }
        }
        
        return helper(node.next);
    }
